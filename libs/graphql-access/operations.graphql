scalar DateTime

type Toy {
  id: ID!
  title: String!
  description: String!
  category: String!
  listPrice: Float!
  condition: ConditionEnum!
  author: Float!
  saleStatus: ToyStatusEnum!
}

type Messaging {
  id: ID!
  parent_message_id: Float!
  subject: String!
  messageBody: String!
  creator_id: Float!
  recipient_id: Float!
  created_date: DateTime!
  is_read: Boolean!
}

type ChatMessage {
  subject: String!
  messageBody: String!
  creator_id: Float!
  recipient_id: Float!
  created_date: DateTime!
  is_read: Boolean!
}

type Conversation {
  id: ID!
  user_id1: Float!
  user_id2: Float!
  created_at: DateTime!
  messages: [ChatMessage!]!
}

query toys {
  toys{
    id
    title
    description
    category
    listPrice
    condition
    author
   
  }
}

query findAllByStatus($saleStatus: ToyStatusEnum!)  {
  findAllByStatus(saleStatus: $saleStatus){
    id
    title
    description
    category
    listPrice
    condition
    author
    saleStatus
  }
}

query findAllByAuthor($author: Float!){
  findAllByAuthor(author: $author){
    id,
    title,
    description,
    category,
    listPrice,
    condition,
    author,
    saleStatus
  }
}

query findUserById ($id: Float!) {
  userById(id: $id) {
    first_name
    last_name
    email_address
  }
}

query  findunreadMessagesForUser($recepient: Float!)  {
  unreadMessages(recepient: $recepient){
    subject
    messageBody
    creator_id
    recipient_id
    is_read
  }
}

query  findToysForSaleExcludingCurrentUser($saleStatus: ToyStatusEnum!, $userid: Float!)  {
  findToysForSaleExcludingCurrentUser(saleStatus: $saleStatus, userid: $userid, ){
    id
    title
    description
    category
    listPrice
    condition
    author
    saleStatus
  }
}

mutation localSignup($input: CreateUserInput!){
  localSignup(createUserInput: $input){
 	 user {
      id,
      first_name
      last_name
      email_address
    }
    access_token
  }
  }

  mutation login($input: LoginUserInput!){
  login(loginUserInput: $input){
    user {
      id,
      first_name
      last_name
      email_address
    }
    access_token
  }
}

mutation createToy($input: CreateToyInput!){
  createToy(createToyInput: $input) {
		id
    title
    description
    category
    listPrice
    condition
    author
    saleStatus
  }
  }

  mutation createConversation($c: CreateConversationInput!){
  createConversation(createConversationInput: $c) {
		id
    user_id1
    user_id2
    created_at
    messages{
      subject
      messageBody
      is_read
    }
  }
}

mutation updateConversation($u: UpdateConversationInput!)  {
  updateConversation(updateConversationInput: $u){
    id
    messages{
      subject
      messageBody
    }
  }
}

  mutation removeToy($id: Int!) {
  removeToy(id: $id) {
      id,
    author
  }
}

input LoginUserInput {
  email_address: String!
  password: String!
  auth_type: AuthEnum!
}

input CreateUserInput {
  first_name: String!
  last_name: String!
  email_address: String!
  password: String!
}

input CreateToyInput {
  title: String!
  description: String!
  category: String!
  listPrice: Float!
  condition: ConditionEnum!
  author: Float!
  saleStatus: ToyStatusEnum!
}

input UpdateToyInput {
  title: String!
  description: String!
  category: String!
  listPrice: Float!
  condition: ConditionEnum!
  author: Float!
  saleStatus: ToyStatusEnum!
  id: ID!
}

input CreateMessagingInput {
  parent_message_id: Float!
  subject: String!
  messageBody: String!
  creator_id: Float!
  recipient_id: Float!
  created_date: DateTime!
  is_read: Boolean!
}

# Auth types
enum AuthEnum {
  LOCAL
  GOOGLE
}

# Popular brand names for toys
enum BrandEnum {
  BARBIE
  DISNEY
  FISHER_PRICE
  HARRY_POTTER
  HASBRO
  HOT_WHEELS
  MY_LITTLE_PONY
  LEGO
  LIGHTYEAR
  MARVEL
  MELISSA_AND_DOUG
  PAW_PATROL
  STAR_WARS
}

# Age Ranges
enum AgeRangeEnum {
  NEWBORN
  INFANT
  TODDLER
  PRE_SCHOOLER
  MIDDLE_SCHOOLER
  YOUNG_TEEN
  TEEN
  ADULT
  ANY
}

# Condition values for toys
enum ConditionEnum {
  NEW
  USED
}

# Sale status for the toy
enum ToyStatusEnum {
  ACTIVE
  PENDING
  DISAPPROVED
  EXPIRED
  SOLD
}

